// Mixins
// ============================================== //

// Clearfix
@mixin clearfix($selector) {
	#{$selector}:before, #{$selector}:after {
		content: '';
		display: table;
	}
	#{$selector}:after {
		clear: both;
		zoom: 1;
	}
}

// Set text overflow with ellipsis
@mixin ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// Set flex flow property
// flex: grow - shrink - basis
@mixin flex($type: '') {
	@if $type == grow {
		flex: 1 0 auto;
	} @else if $type == base {
		flex: 1 1 0%;
	} @else if $type == full {
		flex: 1 1 100%;
	} @else if $type == max {
		flex: 0 0 auto;
	} @else if $type == adapt {
		flex: 1 1 auto;
	} @else {
		flex: 0 1 auto;
	}
}

// Flex flow
@mixin flex-flow($flow) {
	display: flex;
	flex-flow: $flow;
}

// Flex flow inline
@mixin flex-flow-inline($flow) {
	display: inline-flex;
	flex-flow: $flow;
}

// Responsive reset for flex
@mixin flex-reset($selector) {
	display: block;
	#{$selector} {
		width: auto;
	}
}

// For setting bottom padding as height
@mixin fluid-sizing($bottom: '') {
	@if $bottom != '' {
		height: 0;
		padding-bottom: $bottom;
		overflow: hidden;
	}
}

// FontAwesome properties
@mixin icon-font($fs: '', $lh: '') {
	$family: 'FontAwesome';
	display: inline-block;
	font-family: $family;
	font-weight: normal;
	font-style: normal;
	font-variant: normal;

	// Font size logic
	@if ($fs != false) {
		@if ($fs != '') {
			font-size: $fs;
		} @else {
			font-size: rem($global-font-size);
		}
	}

	// Line height logic
	@if ($lh != false) {
		@if ($lh != '') {
			line-height: $lh;
		} @else {
			line-height: 1;
		}
	}

	text-rendering: auto; /* optimizelegibility throws things off #1094 */
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

// Image base properties
@mixin image-base {
	max-width: 100%;
	max-height: 100%;
	@include sizing(auto, auto);
	border: 0;
	margin: auto;
	display: block;
}

// Image centered position properties
@mixin image-centered {
	@include position($type: absolute, $top: 0, $bottom: 0, $right: 0, $left: 0);
}

// Inline block
@mixin inline-block($vertical-align) {
	display: inline-block;
	zoom: 1;
	*display: inline;
	vertical-align: $vertical-align;
}

// Placeholder
// Examples: @include placeholder {}, :focus{@include placeholder {}}, or input {@include placeholder {}}
@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&:-moz-placeholder           {@content}
	&::-moz-placeholder          {@content}
	&:-ms-input-placeholder      {@content}
}

// Mixin for positioning
@mixin position($type: '', $top: '', $bottom: '', $left: '', $right: '', $z: '') {
	@if ($type != '') {
		position: $type;
	}
	@if ($top != '') {
		top: $top;
	}
	@if ($bottom != '') {
		bottom: $bottom;
	}
	@if ($left != '') {
		left: $left;
	}
	@if ($right != '') {
		right: $right;
	}
	@if ($z != '') {
		z-index: $z;
	}
}

// Responsive max-width media query
@mixin respond($breakpoint, $type: '') {
	@if index('px' 'cm' 'mm' 'in' 'pt' 'pc' 'dpi' 'dpcm' 'dppx' 'em' 'ex' 'rem' '%' 'vw' 'vh' 'vmin' 'vmax', unit($breakpoint)) == null {
		$breakpoint: $breakpoint + 'px';
	}
	$type: max-width;
	@if ($type == min-width) {
		$type: min-width;
	}
	@media only screen and ($type: $breakpoint) {
		@content;
	}
}

// Sizing for elements
@mixin sizing($width, $height) {
	width: $width;
	height: $height;
}

// For hiding / showing content
@mixin toggle-content($state, $transition: '') {
	@if $state == hide {
		opacity: 0;
		visibility: hidden;
	}
	@if $state == show {
		visibility: visible;
		opacity: 1;
	}
	@if ($transition == true) {
		@include transition(opacity 0.5s ease);
	}
}

// Screen reader only code (styles borrowed from font awesomer)
@mixin sr-only {
	position: absolute;
	@include sizing(1px !important, 1px !important);
	padding: 0;
	margin: -1px !important;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
}

// Functions
// ============================================== //

// PX to EM conversion
// From https://css-tricks.com/snippets/sass/px-to-em-functions
@function em($pixels, $context: $base-font-size) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1em;
}

// PX to REM conversion
// Modified from https://css-tricks.com/snippets/sass/px-to-em-functions
@function rem($pixels, $context: $base-font-size) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1rem;
}

// Unicode mixin
// Mostly for making sure icons output correctly
// https://github.com/sass/sass/issues/1395#issuecomment-65548751
@function unicode($str){
	@return unquote("\'") + $str + unquote("\'");
}
